import pandera as pa
import pandas as pd

from pandera.typing import DataFrame
from electricore.core.p√©rim√®tre import (
    HistoriqueP√©rim√®tre, SituationP√©rim√®tre, 
    extraire_situation, extraire_p√©riode,
    extraite_relev√©s_entr√©es, extraite_relev√©s_sorties
)
from electricore.core.relev√©s import Relev√©Index
from electricore.core.√©nergies.mod√®les import BaseCalculEnergies

from icecream import ic

def pr√©parer_base_√©nergies(
    historique: DataFrame[HistoriqueP√©rim√®tre], deb: pd.Timestamp, fin: pd.Timestamp
) -> DataFrame[BaseCalculEnergies]:
    """
    üèóÔ∏è Pr√©pare la base des √©nergies en identifiant les entr√©es, sorties et MCT dans la p√©riode.

    Args:
        historique (DataFrame[HistoriqueP√©rim√®tre]): Historique des situations contractuelles.
        deb (pd.Timestamp): D√©but de la p√©riode de calcul des √©nergies.
        fin (pd.Timestamp): Fin de la p√©riode de calcul des √©nergies.

    Returns:
        DataFrame[SituationP√©rim√®tre]: Situation contractuelle enrichie pour le calcul des √©nergies.
    """
    colonnes_meta_releve = ['Unit√©', 'Pr√©cision', 'Source']
    colonnes_releve = ['Id_Calendrier_Distributeur', 'Date_Releve', 'Nature_Index', 'HP', 'HC', 'HCH', 'HPH', 'HPB', 'HCB', 'BASE']
    
    
    
    # 1) On r√©cup√©re la situation du p√©rim√®tre telle qu'elle √©tait √† la date de fin
    situation = extraire_situation(fin, historique)
    
    # 2) On filtre pour n'avoir que les PDLs en service, ou dont le service c'est termin√© dans la p√©riode. 
    # (car pour les autres, aka termin√©s avant la p√©riode, il n'y a rien a calculer pour la p√©riode)
    _masque = (situation['Etat_Contractuel'] == 'EN SERVICE') | (
        (situation['Etat_Contractuel'] == 'RESILIE') & (situation['Date_Evenement'] >= deb)
    )
    colonnes_√©venement = ['Ref_Situation_Contractuelle', 'pdl']
    base = (
        situation[_masque]
        .drop(columns=[col for col in situation if col not in colonnes_√©venement])
        .sort_values(by="Ref_Situation_Contractuelle")
        .copy()
    )

    # 3) On interroge le p√©rim√®tre sur les √©ventuelles entr√©es et sorties, et on r√©cup√©re les relev√©s d'index associ√©s.
    p√©riode: DataFrame[HistoriqueP√©rim√®tre] = extraire_p√©riode(deb, fin, historique)

    entr√©es: DataFrame[Relev√©Index] = (
        extraite_relev√©s_entr√©es(p√©riode)
        .set_index('Ref_Situation_Contractuelle')
        .drop(columns=['pdl'])
        .add_suffix('_deb')
        .assign(E=True)
    )
    sorties: DataFrame[Relev√©Index] = (
        extraite_relev√©s_sorties(p√©riode)
        .set_index('Ref_Situation_Contractuelle')
        .drop(columns=['pdl'])
        .add_suffix('_fin')
        .assign(S=True)
    )
    
    # On les fusionne dans la base
    base = (
        base
        .merge(entr√©es, how='left', left_on='Ref_Situation_Contractuelle', right_index=True)
        .merge(sorties, how='left', left_on='Ref_Situation_Contractuelle', right_index=True)
        .fillna({'E': False, 'S': False})
    )

    return base
