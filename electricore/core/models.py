import pandas as pd
import pandera as pa
from pandera.typing import DataFrame, Series
from typing import Annotated

class BaseFacturationModÃ¨le(pa.DataFrameModel):
    """
    ModÃ¨le Pandera pour la base de facturation.

    Ce modÃ¨le dÃ©finit la structure des donnÃ©es nÃ©cessaires pour le calcul des Ã©nergies 
    et la facturation des points de livraison (PDL). Il regroupe les informations 
    contractuelles, les caractÃ©ristiques du compteur, ainsi que les relevÃ©s de dÃ©but 
    et de fin de pÃ©riode.

    ## ðŸ“Œ **Colonnes**
    
    ### ðŸ”¹ **DonnÃ©es contractuelles**
    - `pdl` (str) : Identifiant unique du Point De Livraison (PDL).
    - `Ref_Situation_Contractuelle` (str) : RÃ©fÃ©rence unique attribuÃ©e par enedis Ã  un rattachement de pdl Ã  un fournisseur. 
    - `Segment_Clientele` (str) : Type de clientÃ¨le (ex. "RÃ©sidentiel", "Professionnel").
    - `Categorie` (str) : CatÃ©gorie C2 Ã  C5.
    - `Puissance_Souscrite` (int) : Puissance souscrite en kVA. NÃ©cessaire pour calculer le TURPE.
    - `Formule_Tarifaire_Acheminement` (str) : Formule tarifaire appliquÃ©e Ã  l'acheminement. NÃ©cessaire pour calculer le TURPE.

    ### ðŸ”¹ **CaractÃ©ristiques du compteur**

    Ces donnÃ©es doivent lÃ©galement apparaitre dans la facture. 
    - `Num_Depannage` (str) : NumÃ©ro de dÃ©pannage liÃ© au PDL. 
    - `Type_Compteur` (str) : Type de compteur installÃ© (ex. "CCB": linky, "CEB": bleu, "CFB": ElectromÃ©canique, "PSC": Point sans comptage).
    - `Num_Compteur` (str) : NumÃ©ro de sÃ©rie du compteur.

    ### ðŸ”¹ **RelevÃ©s de dÃ©but de pÃ©riode**
    - `Date_Releve_deb` (`datetime64[ns, Europe/Paris]`, nullable) : Date du relevÃ© de dÃ©but.
    - `Nature_Index_deb` (str, nullable) : Nature de l'index relevÃ© (ex. "RÃ©el", "EstimÃ©").
    - `HP_deb` (float, nullable) : Index de consommation en Heures Pleines (dÃ©but de pÃ©riode).
    - `HC_deb` (float, nullable) : Index de consommation en Heures Creuses (dÃ©but de pÃ©riode).
    - `HCH_deb` (float, nullable) : Index en Heures Creuses Hautes.
    - `HPH_deb` (float, nullable) : Index en Heures Pleines Hautes.
    - `HPB_deb` (float, nullable) : Index en Heures Pleines Basses.
    - `HCB_deb` (float, nullable) : Index en Heures Creuses Basses.
    - `BASE_deb` (float, nullable) : Index de consommation en option BASE.
    - `source_releve_deb` (str) : Source du relevÃ© (ex. "C15", "R151").

    ### ðŸ”¹ **RelevÃ©s de fin de pÃ©riode**
    - `Date_Releve_fin` (`datetime64[ns, Europe/Paris]`, nullable) : Date du relevÃ© de fin.
    - `HP_fin` (float, nullable) : Index de consommation en Heures Pleines (fin de pÃ©riode).
    - `HC_fin` (float, nullable) : Index de consommation en Heures Creuses (fin de pÃ©riode).
    - `HCH_fin` (float, nullable) : Index en Heures Creuses Hautes.
    - `HPH_fin` (float, nullable) : Index en Heures Pleines Hautes.
    - `HPB_fin` (float, nullable) : Index en Heures Pleines Basses.
    - `HCB_fin` (float, nullable) : Index en Heures Creuses Basses.
    - `BASE_fin` (float, nullable) : Index de consommation en option BASE.
    - `source_releve_fin` (str) : Source du relevÃ© (ex. "C15", "R151").

    ## ðŸ”¹ **Contraintes et Validation**
    - **`Date_Releve_deb` et `Date_Releve_fin`** sont en **Europe/Paris** (`datetime64[ns, Europe/Paris]`).
    - Les valeurs des index (`HP`, `HC`, `BASE`, etc.) peuvent Ãªtre `NaN` si non disponibles. 
    Les inndex doivent Ãªtres exprimÃ©s dans les cadrans les plus prÃ©cis disponibles uniquement. 
    Exemple si on a un compteur de type CCB (linky), les cadrans HPH et HPB doivent Ãªtres remplis, et pas HP.
    - `source_releve_deb` et `source_releve_fin` doivent toujours Ãªtre renseignÃ©s.

    ## ðŸš€ **Utilisation**
    ```python
    from core.schemas import BaseFacturationModÃ¨le
    
    # Valider un DataFrame de facturation
    df = BaseFacturationModÃ¨le.validate(df)
    ```
    """
    # DonnÃ©es contractuelles
    pdl: Series[str] = pa.Field(nullable=False,)
    Ref_Situation_Contractuelle: Series[str] = pa.Field(nullable=False,)
    Segment_Clientele: Series[str] = pa.Field(nullable=False,)
    Categorie: Series[str] = pa.Field(nullable=False,)

    Puissance_Souscrite: Series[int] = pa.Field(nullable=False, coerce=True)
    Formule_Tarifaire_Acheminement: Series[str] = pa.Field(nullable=False,)
    
    Num_Depannage: Series[str] = pa.Field(nullable=False,)
    Type_Compteur: Series[str] = pa.Field(nullable=False,)
    Num_Compteur: Series[str] = pa.Field(nullable=False,)

    # DÃ©but de pÃ©riode de facturation
    Date_Releve_deb: Series[Annotated[pd.DatetimeTZDtype, "s", "Europe/Paris"]] = pa.Field(nullable=True, coerce=True)
    Nature_Index_deb: Series[str] = pa.Field(nullable=True)
    HP_deb: Series[float] = pa.Field(nullable=True, coerce=True)
    HC_deb: Series[float] = pa.Field(nullable=True, coerce=True)
    HCH_deb: Series[float] = pa.Field(nullable=True, coerce=True)
    HPH_deb: Series[float] = pa.Field(nullable=True, coerce=True)
    HPB_deb: Series[float] = pa.Field(nullable=True, coerce=True)
    HCB_deb: Series[float] = pa.Field(nullable=True, coerce=True)
    BASE_deb: Series[float] = pa.Field(nullable=True, coerce=True)
    source_releve_deb: Series[str] = pa.Field(nullable=True)
    # Fin de pÃ©riode de facturation
    Date_Releve_fin: Series[Annotated[pd.DatetimeTZDtype, "s", "Europe/Paris"]] = pa.Field(nullable=True, coerce=True)
    HP_fin: Series[float] = pa.Field(nullable=True, coerce=True)
    HC_fin: Series[float] = pa.Field(nullable=True, coerce=True)
    HCH_fin: Series[float] = pa.Field(nullable=True, coerce=True)
    HPH_fin: Series[float] = pa.Field(nullable=True, coerce=True)
    HPB_fin: Series[float] = pa.Field(nullable=True, coerce=True)
    HCB_fin: Series[float] = pa.Field(nullable=True, coerce=True)
    BASE_fin: Series[float] = pa.Field(nullable=True, coerce=True)
    source_releve_fin: Series[str] = pa.Field(nullable=True)


    # @pa.check("Type_Compteur", "HP_deb", "HP_fin", "HC_deb", "HC_fin", "BASE_deb", "BASE_fin")
    # def validate_linky(cls, df: pd.DataFrame) -> pd.Series:
    #     """
    #     Si Type_Compteur == "CCB", alors HP, HC et BASE doivent Ãªtre NaN.
    #     """
    #     mask_ccb = df["Type_Compteur"] == "CCB"
    #     return df.loc[mask_ccb, ["HP_deb", "HP_fin", "HC_deb", "HC_fin", "BASE_deb", "BASE_fin"]].isna().all(axis=1)