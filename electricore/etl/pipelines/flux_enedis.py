"""
Pipeline principal pour les flux Enedis.
Point d'entr√©e pour l'ex√©cution et la v√©rification des r√©sultats.
"""

import dlt
import duckdb
from sources.sftp_enedis import sftp_flux_enedis_multi


def run_sftp_multi_pipeline(flux_config: dict):
    """
    Ex√©cute le pipeline SFTP multi-ressources.
    
    Args:
        flux_config: Configuration des flux depuis config/settings.py
    
    Returns:
        bool: True si succ√®s, False sinon
    """
    print("üöÄ D√©marrage du pipeline SFTP + AES + DLT (Multi-ressources)")
    print("=" * 70)
    
    # Cr√©er le pipeline DLT
    pipeline = dlt.pipeline(
        pipeline_name="flux_enedis",
        destination="duckdb",
        dataset_name="enedis_multi",
    )
    
    try:
        # Ex√©cuter le chargement
        load_info = pipeline.run(sftp_flux_enedis_multi(flux_config))
        
        print("‚úÖ Pipeline SFTP multi-ressources ex√©cut√© avec succ√®s !")
        print(f"üìä R√©sultats du chargement:")
        print(load_info)
        
        # V√©rifier les r√©sultats
        verify_multi_results()
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur lors de l'ex√©cution du pipeline SFTP multi: {e}")
        return False


def verify_multi_results():
    """
    V√©rifie et affiche les r√©sultats du pipeline SFTP multi-ressources.
    """
    print("\\nüìà V√©rification des r√©sultats SFTP multi dans DuckDB...")
    
    try:
        conn = duckdb.connect('flux_enedis.duckdb')
        
        # Lister les tables cr√©√©es
        tables = conn.execute(
            "SELECT table_name FROM information_schema.tables WHERE table_schema = 'enedis_multi'"
        ).fetchall()
        
        if not tables:
            print("‚ùå Aucune table trouv√©e dans le sch√©ma enedis_multi")
            return
        
        print(f"üìã Tables cr√©√©es: {[t[0] for t in tables]}")
        
        # Statistiques par table
        total_records = 0
        for table_name, in tables:
            try:
                count = conn.execute(f"SELECT COUNT(*) FROM enedis_multi.{table_name}").fetchone()[0]
                total_records += count
                
                # Statistiques par ZIP source pour les tables de flux
                if table_name.startswith('flux_'):
                    zip_stats = conn.execute(f"""
                        SELECT _source_zip, COUNT(*) as records 
                        FROM enedis_multi.{table_name} 
                        WHERE _source_zip IS NOT NULL
                        GROUP BY _source_zip 
                        ORDER BY records DESC 
                        LIMIT 3
                    """).fetchall()
                    
                    if zip_stats:
                        print("   üì¶ Top 3 ZIP sources :")
                        for zip_name, count in zip_stats:
                            print(f"      {zip_name}: {count:,} records")
                
            except Exception as e:
                print(f"   ‚ùå Erreur pour table {table_name}: {e}")
        
        print(f"\\nüéØ Total: {total_records:,} enregistrements charg√©s")
        conn.close()
        
    except Exception as e:
        print(f"‚ùå Erreur lors de la v√©rification SFTP multi: {e}")


def main():
    """
    Point d'entr√©e principal avec v√©rification de configuration.
    """
    print("üîß Pipeline ETL SFTP multi-ressources avec d√©chiffrement AES")
    print("=" * 70)
    
    # V√©rifier la configuration
    try:
        secrets = dlt.secrets
        sftp_config = secrets['sftp']
        aes_config = secrets['aes']
        print("‚úÖ Configuration SFTP et AES trouv√©e")
        print(f"   SFTP URL configur√©: {sftp_config['url'][:20]}...")
        print(f"   Cl√© AES configur√©e: {len(aes_config['key'])} caract√®res")
    except Exception as e:
        print(f"‚ùå Configuration manquante: {e}")
        print("üìù Configurez .dlt/secrets.toml avec les sections [sftp] et [aes]")
        return False
    
    # Charger la configuration des flux
    from config.settings import FLUX_CONFIG
    
    # Ex√©cuter le pipeline
    success = run_sftp_multi_pipeline(FLUX_CONFIG)
    
    if success:
        print("\\nüéâ Pipeline SFTP multi-ressources termin√© avec succ√®s !")
    else:
        print("\\nüí• Pipeline SFTP multi-ressources termin√© avec des erreurs")
    
    return success


if __name__ == "__main__":
    main()