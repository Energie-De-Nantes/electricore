"""
Pipeline ETL SFTP avec d√©chiffrement AES - Version multi-ressources.
Cr√©e une ressource DLT par type de flux pour des tables s√©par√©es.
"""

import dlt
import tempfile
import zipfile
import yaml
from pathlib import Path
from typing import Iterator
from Crypto.Cipher import AES
from dlt.sources.filesystem import filesystem, FileItemDict
from xml_to_dict import xml_to_dict

# Configuration
ETL_DIR = Path(__file__).parent
CONFIG_FILE = ETL_DIR / "simple_flux.yaml"

# Charger la configuration YAML
with open(CONFIG_FILE, 'r', encoding='utf-8') as f:
    FLUX_CONFIG = yaml.safe_load(f)

print(f"üìã Configuration charg√©e pour {len(FLUX_CONFIG)} types de flux: {list(FLUX_CONFIG.keys())}")


def decrypt_file_aes(encrypted_data: bytes, key: bytes, iv: bytes) -> bytes:
    """
    D√©chiffre les donn√©es avec AES-CBC.
    Compatible avec la logique electriflux existante.
    """
    cipher = AES.new(key, AES.MODE_CBC, iv)
    decrypted_data = cipher.decrypt(encrypted_data)
    
    # Supprimer le padding PKCS7 si pr√©sent
    padding_length = decrypted_data[-1]
    if padding_length <= 16:  # Block size AES
        decrypted_data = decrypted_data[:-padding_length]
    
    return decrypted_data


def detect_flux_type_from_zip_name(zip_name: str) -> str:
    """
    D√©tecte le type de flux selon le nom du fichier ZIP.
    Bas√© sur les conventions Enedis.
    """
    zip_name_upper = zip_name.upper()
    
    if '_C15_' in zip_name_upper or '_C12_' in zip_name_upper:
        return 'C15'  # C12 et C15 sont trait√©s de la m√™me fa√ßon
    elif '_R151_' in zip_name_upper:
        return 'R151'
    elif '_R15_' in zip_name_upper and '_ACC' not in zip_name_upper:
        return 'R15'
    elif '_F12_' in zip_name_upper:
        return 'F12'
    elif '_F15_' in zip_name_upper:
        return 'F15'
    elif '_ACC' in zip_name_upper or 'ACC_' in zip_name_upper:
        return 'R15_ACC'
    else:
        return 'UNKNOWN'


@dlt.transformer
def decrypt_extract_flux_specific(items: Iterator[FileItemDict], flux_type: str) -> Iterator[dict]:
    """
    Transformer sp√©cifique √† un type de flux qui :
    1. Filtre les ZIPs correspondant au flux_type
    2. D√©chiffre les fichiers ZIP avec AES-CBC
    3. Extrait et traite les XMLs correspondant au flux_type
    """
    # R√©cup√©rer les cl√©s AES depuis les secrets DLT
    try:
        aes_config = dlt.secrets['aes']
        aes_key = bytes.fromhex(aes_config['key'])
        aes_iv = bytes.fromhex(aes_config['iv'])
    except Exception as e:
        raise ValueError(f"Erreur chargement cl√©s AES depuis secrets: {e}")
    
    # Configuration pour ce type de flux
    config = FLUX_CONFIG[flux_type]
    
    processed_zips = set()
    total_records = 0
    
    # Mode test : limiter √† quelques fichiers
    items_list = list(items)
    test_limit = 5  # Par type de flux
    
    # Filtrer les ZIPs pour ce type de flux
    flux_items = []
    for item in items_list:
        zip_name = item['file_name']
        detected_type = detect_flux_type_from_zip_name(zip_name)
        if detected_type == flux_type:
            flux_items.append(item)
    
    # Limiter pour les tests
    flux_items = flux_items[:test_limit]
    
    print(f"üîç Flux {flux_type}: {len(flux_items)} fichiers ZIP trouv√©s (sur {len(items_list)} total)")
    
    if not flux_items:
        print(f"   ‚ö†Ô∏è Aucun fichier ZIP trouv√© pour le flux {flux_type}")
        return
    
    for encrypted_item in flux_items:
        zip_modified = encrypted_item['modification_date']
        zip_name = encrypted_item['file_name']
        
        # √âviter les doublons bas√© sur nom + date de modification
        zip_key = f"{zip_name}_{zip_modified}"
        if zip_key in processed_zips:
            continue
        processed_zips.add(zip_key)
        
        print(f"üîê {flux_type}: D√©chiffrement de {zip_name}")
        
        with tempfile.TemporaryDirectory() as temp_dir:
            temp_path = Path(temp_dir)
            zip_records = 0
            
            try:
                # 1. Lire le fichier chiffr√© depuis SFTP
                with encrypted_item.open() as f:
                    encrypted_data = f.read()
                
                # 2. D√©chiffrer avec AES-CBC
                decrypted_data = decrypt_file_aes(encrypted_data, aes_key, aes_iv)
                
                # 3. Sauvegarder le ZIP d√©chiffr√© temporairement
                zip_path = temp_path / f"decrypted_{zip_name}"
                if not zip_path.name.endswith('.zip'):
                    zip_path = zip_path.with_suffix('.zip')
                
                zip_path.write_bytes(decrypted_data)
                
                # 4. Extraire le ZIP
                extract_dir = temp_path / 'extracted'
                extract_dir.mkdir(exist_ok=True)
                
                with zipfile.ZipFile(zip_path, 'r') as zip_ref:
                    zip_ref.extractall(extract_dir)
                
                xml_files = list(extract_dir.glob('**/*.xml'))
                
                # 5. Traiter chaque XML avec xml_to_dict
                for xml_path in xml_files:
                    # Utiliser xml_to_dict avec la config du flux
                    xml_record_count = 0
                    for record in xml_to_dict(
                        xml_path, 
                        row_level=config['row_level'],
                        metadata_fields=config.get('metadata_fields', {}),
                        data_fields=config.get('data_fields', {}),
                        nested_fields=config.get('nested_fields', [])
                    ):
                        xml_record_count += 1
                        zip_records += 1
                        total_records += 1
                        
                        # Ajouter m√©tadonn√©es pour tra√ßabilit√©
                        record['_source_zip'] = zip_name
                        record['_zip_modified'] = zip_modified
                        record['_flux_type'] = flux_type
                        record['_xml_name'] = xml_path.name
                        
                        yield record
                    
                    if xml_record_count > 0:
                        print(f"   ‚úÖ {xml_path.name}: {xml_record_count} enregistrements")
                
                if zip_records > 0:
                    print(f"üìä {flux_type} - {zip_name}: {zip_records} enregistrements")
                        
            except zipfile.BadZipFile as e:
                print(f"‚ùå ZIP corrompu {zip_name}: {e}")
                continue
            except Exception as e:
                print(f"‚ùå Erreur {zip_name}: {e}")
                continue
    
    print(f"üéØ {flux_type}: {total_records} enregistrements totaux")


@dlt.source
def sftp_flux_enedis_multi():
    """
    Source DLT multi-ressources pour flux Enedis via SFTP avec d√©chiffrement AES.
    
    Cr√©e une ressource DLT par type de flux configur√©.
    Chaque ressource produit une table s√©par√©e.
    """
    # URL SFTP depuis secrets
    sftp_config = dlt.secrets['sftp']
    sftp_url = sftp_config['url']
    file_pattern = sftp_config.get('file_pattern', '**/*.zip')
    
    print(f"üåê Connexion SFTP : {sftp_url}")
    print(f"üìÅ Pattern de fichiers : {file_pattern}")
    
    resources = []
    
    for flux_type, config in FLUX_CONFIG.items():
        print(f"üèóÔ∏è  Cr√©ation de la ressource pour {flux_type}")
        
        # Source filesystem DLT pour SFTP (partag√©e)
        encrypted_files = filesystem(
            bucket_url=sftp_url,
            file_glob=file_pattern
        )
        
        # Pipeline de transformation sp√©cifique au flux
        flux_records = encrypted_files | decrypt_extract_flux_specific(flux_type=flux_type)
        
        # Configuration DLT par flux
        flux_records = flux_records.with_name(f"flux_{flux_type.lower()}")
        
        # D√©terminer la cl√© primaire selon le type de flux
        if flux_type in ['R15', 'R151', 'R15_ACC']:
            # Flux de relev√©s : PDL + Date
            primary_key = ["pdl", "Date_Releve", "_xml_name"]  # Ajouter xml_name pour √©viter doublons
        elif flux_type in ['F12', 'F15']:
            # Flux de facturation : PDL + Facture + Element valoris√©
            primary_key = ["pdl", "Num_Facture", "Id_EV"] 
        else:  # C15
            # Flux contractuels : PDL + Date √©v√©nement + source pour √©viter doublons
            primary_key = ["pdl", "Date_Evenement", "_xml_name"]
        
        # Appliquer les hints DLT - d√©sactiver primary_key pour debug
        flux_records.apply_hints(
            # primary_key=primary_key,  # D√©sactiv√© temporairement pour debug
            write_disposition="replace",  # Replace pour √©viter erreur primary_key
            # incremental=dlt.sources.incremental("_zip_modified")  # D√©sactiv√© temporairement
        )
        
        resources.append(flux_records)
    
    return resources


def run_sftp_multi_pipeline():
    """
    Ex√©cute le pipeline SFTP multi-ressources.
    """
    print("üöÄ D√©marrage du pipeline SFTP + AES + DLT (Multi-ressources)")
    print("=" * 70)
    
    # Cr√©er le pipeline DLT
    pipeline = dlt.pipeline(
        pipeline_name="flux_enedis_sftp_multi",
        destination="duckdb",
        dataset_name="enedis_multi"
    )
    
    try:
        # Ex√©cuter le chargement
        load_info = pipeline.run(sftp_flux_enedis_multi())
        
        print("‚úÖ Pipeline SFTP multi-ressources ex√©cut√© avec succ√®s !")
        print(f"üìä R√©sultats du chargement:")
        print(load_info)
        
        # V√©rifier les r√©sultats
        verify_multi_results()
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur lors de l'ex√©cution du pipeline SFTP multi: {e}")
        return False


def verify_multi_results():
    """
    V√©rifie et affiche les r√©sultats du pipeline SFTP multi-ressources.
    """
    print("\\nüìà V√©rification des r√©sultats SFTP multi dans DuckDB...")
    
    try:
        import duckdb
        conn = duckdb.connect('flux_enedis_sftp_multi.duckdb')
        
        # Lister les tables cr√©√©es
        tables = conn.execute(
            "SELECT table_name FROM information_schema.tables WHERE table_schema = 'enedis_multi'"
        ).fetchall()
        
        if not tables:
            print("‚ùå Aucune table trouv√©e dans le sch√©ma enedis_multi")
            return
        
        print(f"üìã Tables cr√©√©es: {[t[0] for t in tables]}")
        
        # Statistiques par table
        total_records = 0
        for table_name, in tables:
            try:
                count = conn.execute(f"SELECT COUNT(*) FROM enedis_multi.{table_name}").fetchone()[0]
                print(f"   üìä {table_name}: {count:,} enregistrements")
                total_records += count
                
                # Statistiques par ZIP source pour les tables de flux
                if table_name.startswith('flux_'):
                    zip_stats = conn.execute(f"""
                        SELECT _source_zip, COUNT(*) as records 
                        FROM enedis_multi.{table_name} 
                        WHERE _source_zip IS NOT NULL
                        GROUP BY _source_zip 
                        ORDER BY records DESC 
                        LIMIT 3
                    """).fetchall()
                    
                    if zip_stats:
                        print("   üì¶ Top 3 ZIP sources :")
                        for zip_name, count in zip_stats:
                            print(f"      {zip_name}: {count:,} records")
                
            except Exception as e:
                print(f"   ‚ùå Erreur pour table {table_name}: {e}")
        
        print(f"\\nüéØ Total: {total_records:,} enregistrements charg√©s")
        conn.close()
        
    except Exception as e:
        print(f"‚ùå Erreur lors de la v√©rification SFTP multi: {e}")


if __name__ == "__main__":
    print("üîß Pipeline ETL SFTP multi-ressources avec d√©chiffrement AES")
    print("=" * 70)
    
    # V√©rifier la configuration
    try:
        secrets = dlt.secrets
        sftp_config = secrets['sftp']
        aes_config = secrets['aes']
        print("‚úÖ Configuration SFTP et AES trouv√©e")
        print(f"   SFTP URL configur√©: {sftp_config['url'][:20]}...")
        print(f"   Cl√© AES configur√©e: {len(aes_config['key'])} caract√®res")
    except Exception as e:
        print(f"‚ùå Configuration manquante: {e}")
        print("üìù Configurez .dlt/secrets.toml avec les sections [sftp] et [aes]")
        exit(1)
    
    # Ex√©cuter le pipeline
    success = run_sftp_multi_pipeline()
    
    if success:
        print("\\nüéâ Pipeline SFTP multi-ressources termin√© avec succ√®s !")
    else:
        print("\\nüí• Pipeline SFTP multi-ressources termin√© avec des erreurs")