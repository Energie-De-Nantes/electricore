"""
Helpers de logging pour les op√©rations ETL.
Fonctions pures pour le logging structur√© des traitements.
"""

import zipfile


def log_processing_info(flux_type: str, zip_name: str, record_count: int):
    """
    Log les informations de traitement d'un fichier ZIP.
    
    Args:
        flux_type: Type de flux trait√©
        zip_name: Nom du fichier ZIP
        record_count: Nombre d'enregistrements trait√©s (peut √™tre 0 en d√©but)
    """
    print(f"üîê {flux_type}: D√©chiffrement de {zip_name}")
    if record_count > 0:
        # Log d√©taill√© uniquement si demand√©
        pass


def log_xml_info(xml_name: str, record_count: int):
    """
    Log les informations de traitement d'un fichier XML.
    
    Args:
        xml_name: Nom du fichier XML
        record_count: Nombre d'enregistrements extraits
    """
    if record_count > 0:
        print(f"   ‚úÖ {xml_name}: {record_count} enregistrements")


def log_error(zip_name: str, error: Exception):
    """
    Log les erreurs de traitement de mani√®re structur√©e.
    
    Args:
        zip_name: Nom du fichier ayant caus√© l'erreur
        error: Exception captur√©e
    """
    if isinstance(error, zipfile.BadZipFile):
        print(f"‚ùå ZIP corrompu {zip_name}: {error}")
    else:
        print(f"‚ùå Erreur {zip_name}: {error}")