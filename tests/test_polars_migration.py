#!/usr/bin/env python3
"""
Tests comparatifs pour la migration Polars.

Ce module teste les performances et la fonctionnalit√© des nouveaux
mod√®les Polars compar√©s aux anciens mod√®les pandas.
"""

import pytest
import time
import pandas as pd
import polars as pl
from pathlib import Path
import sys

# Ajouter le chemin du projet pour les imports
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root))

from electricore.core.loaders.polars_loader import charger_releves, charger_historique
from electricore.core.models_polars.releve_index_polars import Relev√©IndexPolars
from electricore.core.models_polars.historique_perimetre_polars import HistoriqueP√©rim√®trePolars


class TestPolarsMigration:
    """Tests de migration et comparaison pandas vs polars."""
    
    @classmethod
    def setup_class(cls):
        """Configuration des tests."""
        cls.export_dir = Path.home() / "data" / "export_flux"
        cls.releves_path = cls.export_dir / "releves.parquet"
        cls.historique_path = cls.export_dir / "historique.parquet"
        
        # Skip les tests si les donn√©es ne sont pas disponibles
        if not cls.export_dir.exists():
            pytest.skip("R√©pertoire d'export non disponible pour les tests")
    
    def test_chargement_releves_basic(self):
        """Test basique du chargement de relev√©s."""
        if self.releves_path.exists():
            # Test chargement relev√©s
            start_time = time.time()
            df_releves = charger_releves(self.releves_path, valider=False)
            load_time = time.time() - start_time
            
            assert isinstance(df_releves, pl.DataFrame)
            assert len(df_releves) > 0
            assert "Date_Releve" in df_releves.columns
            assert "pdl" in df_releves.columns
            
            # V√©rifier les performances (doit √™tre rapide)
            assert load_time < 1.0, f"Chargement trop lent : {load_time:.2f}s"
    
    def test_polars_vs_pandas_performance(self):
        """Compare les performances Polars vs Pandas."""
        if not self.releves_path.exists():
            pytest.skip("Fichier relev√©s non disponible")
        
        # Chargement avec Polars
        start_time = time.time()
        df_polars = charger_releves(self.releves_path, valider=False)
        polars_time = time.time() - start_time
        
        # Chargement avec Pandas (pour comparaison)
        start_time = time.time()
        df_pandas = pd.read_parquet(self.releves_path)
        pandas_time = time.time() - start_time
        
        print(f"\nüìä Comparaison des performances :")
        print(f"   Polars : {polars_time:.3f}s")
        print(f"   Pandas : {pandas_time:.3f}s")
        print(f"   Ratio  : {pandas_time/polars_time:.1f}x")
        
        # V√©rifier que les donn√©es sont coh√©rentes
        assert len(df_polars) == len(df_pandas)
        assert len(df_polars.columns) >= len(df_pandas.columns)  # Polars peut avoir des colonnes ajout√©es
    
    def test_chargement_historique_basic(self):
        """Test basique du chargement d'historique."""
        if self.historique_path.exists():
            # Test chargement historique
            start_time = time.time()
            df_historique = charger_historique(self.historique_path, valider=False)
            load_time = time.time() - start_time
            
            assert isinstance(df_historique, pl.DataFrame)
            assert len(df_historique) > 0
            assert "Date_Evenement" in df_historique.columns
            assert "pdl" in df_historique.columns
            
            # V√©rifier les performances (doit √™tre rapide)
            assert load_time < 1.0, f"Chargement trop lent : {load_time:.2f}s"
    
    def test_polars_expressions_basic(self):
        """Test des expressions Polars basiques sur les donn√©es charg√©es."""
        if not self.releves_path.exists():
            pytest.skip("Fichier relev√©s non disponible")
            
        df = charger_releves(self.releves_path, valider=False)
        
        # Test d'op√©rations Polars typiques
        
        # 1. Filtrage avec expressions
        df_filtered = df.filter(pl.col("Source") == "flux_R151")
        assert len(df_filtered) >= 0
        
        # 2. Agr√©gation par groupe
        if "BASE" in df.columns:
            agg_result = (
                df
                .group_by("pdl")
                .agg([
                    pl.col("BASE").count().alias("count_base"),
                    pl.col("BASE").mean().alias("mean_base")
                ])
            )
            assert len(agg_result) > 0
        
        # 3. Window functions 
        df_with_lag = df.with_columns([
            pl.col("Date_Releve").shift(1).over("pdl").alias("date_precedente")
        ])
        assert "date_precedente" in df_with_lag.columns
    
    def test_pandas_compatibility(self):
        """Test de la compatibilit√© pandas pour les anciens pipelines."""
        if not self.releves_path.exists():
            pytest.skip("Fichier relev√©s non disponible")
            
        # Charger en Polars puis convertir en pandas
        df_polars = charger_releves(self.releves_path, valider=False)
        df_pandas_from_polars = df_polars.to_pandas()
        
        assert isinstance(df_pandas_from_polars, pd.DataFrame)
        assert len(df_pandas_from_polars) > 0
        assert "Date_Releve" in df_pandas_from_polars.columns
        
        # V√©rifier que les types sont compatibles pandas
        assert str(df_pandas_from_polars["Date_Releve"].dtype).startswith("datetime64")
    
    def test_schema_validation_success(self):
        """Test la validation r√©ussie avec des donn√©es valides."""
        if not self.historique_path.exists():
            pytest.skip("Fichier historique non disponible")
            
        try:
            df_historique = charger_historique(self.historique_path, valider=True)
            # Si on arrive ici, la validation a r√©ussi
            assert isinstance(df_historique, pl.DataFrame)
            assert len(df_historique) > 0
            
        except Exception as e:
            # Si la validation √©choue, c'est aussi informatif
            print(f"‚ö†Ô∏è  Validation √©chou√©e (attendu pendant la migration) : {e}")
            pytest.skip("Validation en cours d'ajustement")
    
    def test_memory_usage_comparison(self):
        """Compare l'utilisation m√©moire Polars vs Pandas."""
        if not self.releves_path.exists():
            pytest.skip("Fichier relev√©s non disponible")
            
        import psutil
        import os
        
        process = psutil.Process(os.getpid())
        
        # Mesure m√©moire avant
        mem_before = process.memory_info().rss / 1024 / 1024  # MB
        
        # Chargement avec Polars
        df_polars = charger_releves(self.releves_path, valider=False)
        
        mem_after_polars = process.memory_info().rss / 1024 / 1024  # MB
        polars_memory = mem_after_polars - mem_before
        
        # Nettoyage
        del df_polars
        
        # Chargement avec Pandas
        df_pandas = pd.read_parquet(self.releves_path)
        
        mem_after_pandas = process.memory_info().rss / 1024 / 1024  # MB
        pandas_memory = mem_after_pandas - mem_after_polars
        
        print(f"\nüß† Comparaison m√©moire :")
        print(f"   Polars : {polars_memory:.1f} MB")
        print(f"   Pandas : {pandas_memory:.1f} MB")
        
        # Nettoyage
        del df_pandas
        
        # Polars est g√©n√©ralement plus efficace en m√©moire
        # Mais on ne fait pas d'assertion stricte car cela d√©pend des donn√©es


@pytest.mark.benchmark
class TestPolarsBenchmarks:
    """Tests de performance sp√©cifiques."""
    
    @classmethod
    def setup_class(cls):
        """Configuration des benchmarks."""
        cls.export_dir = Path.home() / "data" / "export_flux"
        cls.releves_path = cls.export_dir / "releves.parquet"
        
        if not cls.export_dir.exists():
            pytest.skip("R√©pertoire d'export non disponible pour les benchmarks")
    
    def test_benchmark_loading_speed(self):
        """Benchmark de la vitesse de chargement."""
        if not self.releves_path.exists():
            pytest.skip("Fichier relev√©s non disponible")
        
        # Test avec plusieurs iterations pour avoir des mesures stables
        n_iterations = 5
        
        polars_times = []
        pandas_times = []
        
        for i in range(n_iterations):
            # Polars
            start_time = time.time()
            df_polars = charger_releves(self.releves_path, valider=False)
            polars_time = time.time() - start_time
            polars_times.append(polars_time)
            del df_polars
            
            # Pandas
            start_time = time.time()
            df_pandas = pd.read_parquet(self.releves_path)
            pandas_time = time.time() - start_time
            pandas_times.append(pandas_time)
            del df_pandas
        
        avg_polars = sum(polars_times) / len(polars_times)
        avg_pandas = sum(pandas_times) / len(pandas_times)
        
        print(f"\n‚ö° Benchmark chargement (moyenne sur {n_iterations} runs) :")
        print(f"   Polars : {avg_polars:.4f}s")
        print(f"   Pandas : {avg_pandas:.4f}s")
        print(f"   Speedup: {avg_pandas/avg_polars:.1f}x")
        
        # Polars devrait √™tre au moins comparable √† pandas
        assert avg_polars <= avg_pandas * 1.5, "Polars significativement plus lent"


if __name__ == "__main__":
    # Ex√©cution directe pour debugging
    pytest.main([__file__, "-v", "--tb=short"])