import marimo

__generated_with = "0.16.0"
app = marimo.App(width="medium")

with app.setup(hide_code=True):
    import marimo as mo
    import polars as pl
    import pandas as pd
    import sys
    from pathlib import Path
    from datetime import datetime, timezone, date
    import time
    import calendar
    from typing import Dict, List, Optional, Tuple

    # Ajouter le chemin du projet
    project_root = Path.cwd()
    if str(project_root) not in sys.path:
        sys.path.append(str(project_root))

    # Imports des loaders DuckDB
    from electricore.core.loaders import f15, c15, r151, releves_harmonises, execute_custom_query

    from electricore.core.pipelines import facturation
    from electricore.core.loaders import OdooReader
    import tomllib


@app.cell(hide_code=True)
def _():
    mo.md(r"""# Pr√©paration des donn√©es""")
    return


@app.cell(hide_code=True)
def load_pipeline_data():
    """Chargement des donn√©es pour le pipeline de calcul TURPE variable"""

    mo.md("## üîß Calcul TURPE Variable via le pipeline")

    print("üîÑ Chargement des donn√©es pour le pipeline...")

    # Charger l'historique C15 enrichi
    print("üìÑ Chargement historique C15...")
    historique_lf = c15().lazy()

    # Charger les relev√©s R151
    print("üìÑ Chargement relev√©s R151...")
    releves_lf = releves_harmonises().lazy()
    return historique_lf, releves_lf


@app.cell(hide_code=True)
def _():
    mo.md(r"""# Calcul Facturation""")
    return


@app.cell(hide_code=True)
def calculate_turpe_variable(historique_lf, releves_lf):
    # Pipeline complet
    result = facturation(historique_lf, releves_lf)

    # Acc√©der aux r√©sultats
    print("Historique enrichi:", result.historique_enrichi.collect().shape)
    print("Abonnements:", result.abonnements.collect().shape)
    print("√ânergie:", result.energie.collect().shape)
    print("Facturation:", result.facturation.shape)  # D√©j√† collect√©

    # Unpacking pour r√©cup√©rer les 3 DataFrames
    hist, abo, ener, fact = result
    return (fact,)


@app.cell(hide_code=True)
def _():
    mo.md(r"""# Comparaison avec les factures Odoo""")
    return


@app.cell(hide_code=True)
def _():
    """Configuration Odoo depuis secrets.toml"""
    # Chercher le fichier secrets.toml
    secrets_paths = [
        Path.cwd() / '.dlt' / 'secrets.toml',
        Path.cwd() / 'electricore' / 'etl' / '.dlt' / 'secrets.toml'
    ]

    config = {}
    secrets_file_found = None

    for secrets_path in secrets_paths:
        if secrets_path.exists():
            with open(secrets_path, 'rb') as f:
                config_data = tomllib.load(f)
                config = config_data.get('odoo', {})
                secrets_file_found = secrets_path
            break

    if not config:
        print("‚ö†Ô∏è Configuration Odoo non trouv√©e")
        print("Cr√©ez le fichier .dlt/secrets.toml avec la section [odoo]")
        config = None
    else:
        print(f"‚úÖ Configuration Odoo charg√©e depuis {secrets_file_found}")
    return (config,)


@app.cell(hide_code=True)
def _(config):
    """Extraction des factures Odoo"""
    if config is None:
        print("‚ùå Pas de configuration Odoo disponible")
        odoo_factures = None
    else:
        print("üîÑ Extraction des factures depuis Odoo...")

        try:
            with OdooReader(config=config) as odoo:
                # R√©cup√©rer les commandes avec PDL et factures
                odoo_factures = (
                    odoo.query('sale.order',
                        domain=[('state', '=', 'sale'), ('x_pdl', '!=', False)],
                        fields=['x_pdl', 'name', 'x_lisse', 'invoice_ids'])
                    .follow('invoice_ids',  # Navigation vers account.move
                        fields=['name', 'invoice_date', 'amount_total', 'invoice_line_ids'])
                    .follow('invoice_line_ids',  # Navigation vers account.move.line
                        fields=['name', 'product_id', 'quantity', 'price_unit', 'price_total'])
                    .follow('product_id',  # Enrichissement avec produit
                        fields=['name', 'categ_id'])
                    .enrich('categ_id',  # Enrichissement avec cat√©gorie
                        fields=['name'])
                    .filter(pl.col('price_total') != 0)  # Exclure les lignes nulles
                    .select([
                        pl.col('x_pdl').alias('pdl'),
                        pl.col('name').alias('order_name'),
                        pl.col('x_lisse').alias('lisse'),
                        pl.col('name_account_move').alias('invoice_name'),
                        pl.col('invoice_date'),
                        pl.col('name_product_product').alias('product_name'),
                        pl.col('name_product_category').alias('categorie'),
                        pl.col('quantity'),
                        pl.col('price_unit'),
                        pl.col('price_total'),
                    ])
                    .collect()
                    .with_columns([
                        pl.col('lisse').fill_null(False).alias('lisse')
                    ])
                )

            print(f"‚úÖ lignes de factures extraites")

        except Exception as e:
            print(f"‚ùå Erreur lors de l'extraction Odoo: {e}")
            odoo_factures = None
    return (odoo_factures,)


@app.cell
def _(odoo_factures):
    odoo_factures
    return


@app.cell(hide_code=True)
def _():
    mo.md(
        """
    ## üéØ Pr√©paration des donn√©es Odoo pour comparaison

    **Objectif** : Filtrer et pr√©parer les donn√©es de facturation Odoo pour une comparaison pertinente.

    **√âtapes** :

    1. **Exclusion des abonnements liss√©s** : Les abonnements liss√©s ne correspondent pas aux consommations r√©elles
    2. **D√©calage temporel** : Date facture (mois N+1) ‚Üí P√©riode consommation (mois N)
    3. **Classification des produits** : Identifier BASE, HP, HC, ABONNEMENT, TURPE
    4. **D√©tection du type de tarification** :
       - Si BASE factur√© ‚Üí Client en tarif Base
       - Si HP ou HC factur√© ‚Üí Client en tarif HP/HC

    **R√©sultat** : DataFrame `odoo_prepare` avec le type de tarification identifi√© pour chaque PDL√óp√©riode
    """
    )
    return


@app.cell(hide_code=True)
def _(odoo_factures):
    odoo_prepare = (
        odoo_factures
        .filter(pl.col('lisse') == False)
        .with_columns([
            # D√âCALAGE D'UN MOIS : date facture Odoo (mois N+1) ‚Üí p√©riode consommation (mois N)
            pl.col('invoice_date').str.to_date().dt.offset_by('-1mo').dt.strftime('%Y-%m').alias('periode'),
        ])
        .group_by(['pdl', 'periode', 'categorie'])
        .agg([
            pl.col('quantity').sum().alias('quantite'),
            pl.col('price_total').sum().alias('montant')
        ])
        .pivot(on='categorie', index=['pdl', 'periode'], values='quantite')
        .rename(mapping={'Base': 'base'})
        .with_columns([
            pl.when(pl.col('base') > 0)
              .then(pl.lit('BASE'))
              .when((pl.col('HP') > 0) | (pl.col('HC') > 0))
              .then(pl.lit('HPHC'))
              .otherwise(pl.lit('INCONNU'))
              .alias('type_tarification')
        ])
    )

    print(f"‚úÖ Odoo pr√©par√©: {len(odoo_prepare)} PDL√óp√©riodes")
    print(f"üìä Colonnes finales: {odoo_prepare.columns}")
    return (odoo_prepare,)


@app.cell
def _(odoo_prepare):
    odoo_prepare
    return


@app.cell(hide_code=True)
def _():
    mo.md(
        """
    ## üîß Pr√©paration des donn√©es ElectriCore

    **Objectif** : Pr√©parer les quantit√©s physiques calcul√©es par ElectriCore pour la comparaison.

    **Donn√©es utilis√©es** :

    - DataFrame `fact` : M√©ta-p√©riodes de facturation (d√©j√† agr√©g√©es par mois)
    - Quantit√©s physiques : kWh Base/HP/HC, jours d'abonnement, puissance souscrite
    - Montants TURPE : seuls montants calcul√©s √† comparer avec Odoo

    **R√©sultat** : DataFrame `electricore_prepare` pr√™t pour la jointure avec les donn√©es Odoo
    """
    )
    return


@app.cell(hide_code=True)
def _(fact):
    """Pr√©pare les donn√©es ElectriCore : quantit√©s physiques calcul√©es"""
    if fact is None:
        print("‚ùå Pas de donn√©es ElectriCore")
        electricore_prepare = None
    else:
        print("üîÑ Pr√©paration des donn√©es ElectriCore...")

        # Utiliser directement les m√©ta-p√©riodes (fact contient d√©j√† les agr√©gations mensuelles)
        electricore_prepare = (
            fact.with_columns([
                pl.col('debut').dt.strftime('%Y-%m').alias('periode'),
            ])
            .filter(pl.col('data_complete') == True)
            .select([
                'pdl', 'periode',
                'ref_situation_contractuelle',  # R√©f√©rence contrat pour groupby
                # Quantit√©s physiques
                'nb_jours',  # jours d'abonnement
                'puissance_moyenne',  # kVA souscrite
                'base_energie',  # kWh Base
                'hp_energie',   # kWh HP
                'hc_energie',   # kWh HC
                # Montants TURPE (seuls montants √† comparer)
                'turpe_fixe',
                'turpe_variable'
            ])
            .rename({
                'nb_jours': 'jours_abo',
                'puissance_moyenne': 'puissance_kva',
                'base_energie': 'base_kwh',
                'hp_energie': 'hp_kwh',
                'hc_energie': 'hc_kwh',
                'turpe_fixe': 'turpe_fixe_eur',
                'turpe_variable': 'turpe_variable_eur'
            })
        )

        print(f"‚úÖ ElectriCore pr√©par√©: {len(electricore_prepare)} PDL√óp√©riodes")
        print(f"üìä Colonnes: {electricore_prepare.columns}")
    return (electricore_prepare,)


@app.cell(hide_code=True)
def _():
    mo.md(
        """
    ## üîÄ Jointure et comparaison des donn√©es

    **Objectif** : Joindre les donn√©es ElectriCore et Odoo puis calculer les √©carts selon le type de tarification.

    **Logique de comparaison** :

    1. **Jointure** sur PDL + p√©riode
    2. **Filtrage** : Garder uniquement les p√©riodes pr√©sentes dans les deux syst√®mes
    3. **Comparaison adapt√©e** selon le type de tarification :
       - **Tarif Base** : Comparer uniquement `base_kwh` vs `BASE`
       - **Tarif HP/HC** : Comparer `hp_kwh` vs `HP` et `hc_kwh` vs `HC`
    4. **Calculs d'√©carts** : Diff√©rences absolues et relatives

    **R√©sultat** : DataFrame `comparison` avec √©carts pertinents uniquement
    """
    )
    return


@app.cell(hide_code=True)
def _(electricore_prepare, odoo_prepare):
    """Jointure et calculs de comparaison selon le type de tarification"""
    if electricore_prepare is None or odoo_prepare is None:
        print("‚ùå Impossible de faire la jointure")
        comparison = None
    else:
        print("üîÑ Jointure des donn√©es...")

        # √âtape 1: Filtrer les donn√©es avec PDL valides
        electricore_clean = electricore_prepare.filter(
            (pl.col('pdl').is_not_null()) &
            (pl.col('pdl') != '') &
            (pl.col('periode').is_not_null())
        )

        odoo_clean = odoo_prepare.filter(
            (pl.col('pdl').is_not_null()) &
            (pl.col('pdl') != '') &
            (pl.col('periode').is_not_null())
        )

        print(f"üìä ElectriCore clean: {len(electricore_clean)} lignes")
        print(f"üìä Odoo clean: {len(odoo_clean)} lignes")

        # √âtape 2: Jointure sur PDL + p√©riode
        joined = electricore_clean.join(
            odoo_clean,
            on=['pdl', 'periode'],
            how='inner'  # Garder uniquement les p√©riodes communes
        )

        print(f"üîó Apr√®s jointure: {len(joined)} lignes communes")

        # √âtape 3: Calculs d'√©carts selon le type de tarification
        comparison = joined.with_columns([
            # √âcarts jours abonnement (pas d'abonnement dans les donn√©es Odoo pour l'instant)
            pl.lit(None).alias('ecart_jours_abo'),

            # √âcarts √©nerg√©tiques SEULEMENT selon le type de tarification
            pl.when(pl.col('type_tarification') == 'BASE')
              .then(pl.col('base_kwh') - pl.col('base'))  # Comparer Base vs base
              .otherwise(None)
              .alias('ecart_base_kwh'),

            pl.when(pl.col('type_tarification') == 'HPHC')
              .then(pl.col('hp_kwh') - pl.col('HP'))  # Comparer HP vs HP
              .otherwise(None)
              .alias('ecart_hp_kwh'),

            pl.when(pl.col('type_tarification') == 'HPHC')
              .then(pl.col('hc_kwh') - pl.col('HC'))  # Comparer HC vs HC
              .otherwise(None)
              .alias('ecart_hc_kwh')
        ])

        # √âtape 4: Calculs des √©carts relatifs (en %)
        comparison = comparison.with_columns([
            # √âcarts relatifs jours abonnement (pas d'abonnement dans les donn√©es Odoo)
            pl.lit(None).alias('ecart_pct_jours_abo'),

            # √âcarts relatifs √©nerg√©tiques (seulement pour les quantit√©s pertinentes)
            pl.when((pl.col('type_tarification') == 'BASE') & (pl.col('base') > 0))
              .then((pl.col('ecart_base_kwh') / pl.col('base') * 100))
              .otherwise(None)
              .alias('ecart_pct_base_kwh'),

            pl.when((pl.col('type_tarification') == 'HPHC') & (pl.col('HP') > 0))
              .then((pl.col('ecart_hp_kwh') / pl.col('HP') * 100))
              .otherwise(None)
              .alias('ecart_pct_hp_kwh'),

            pl.when((pl.col('type_tarification') == 'HPHC') & (pl.col('HC') > 0))
              .then((pl.col('ecart_hc_kwh') / pl.col('HC') * 100))
              .otherwise(None)
              .alias('ecart_pct_hc_kwh')
        ])

        print(f"‚úÖ Comparaison cr√©√©e: {len(comparison)} lignes")
        print(f"üìä Colonnes: {comparison.columns}")
    return (comparison,)


@app.cell(hide_code=True)
def _(comparison):
    """Affichage des statistiques de comparaison"""
    if comparison is None:
        print("‚ùå Pas de donn√©es de comparaison")
    else:
        print(f"üìä Statistiques de la comparaison:")
        print(f"   ‚Ä¢ Nombre total de PDL√óp√©riodes: {len(comparison)}")

        # Statistiques par type de tarification
        stats_tarif = comparison.group_by('type_tarification').len().sort('len', descending=True)
        print(f"   ‚Ä¢ R√©partition par tarification:")
        for row in stats_tarif.iter_rows():
            tarif, count = row
            print(f"     - {tarif}: {count} lignes")
    return


@app.cell
def _(comparison):
    comparison
    return


@app.cell(hide_code=True)
def _(comparison):
    """Analyse des √©carts de la comparaison"""
    if comparison is None:
        print("‚ùå Pas de donn√©es de comparaison")
    else:
        print(f"üîç Analyse des √©carts significatifs (> 5%):")

        # Compter les √©carts significatifs par type
        ecarts_base = comparison.filter(
            (pl.col('type_tarification') == 'BASE') &
            (pl.col('ecart_pct_base_kwh').abs() > 5)
        )

        ecarts_hp = comparison.filter(
            (pl.col('type_tarification') == 'HPHC') &
            (pl.col('ecart_pct_hp_kwh').abs() > 5)
        )

        ecarts_hc = comparison.filter(
            (pl.col('type_tarification') == 'HPHC') &
            (pl.col('ecart_pct_hc_kwh').abs() > 5)
        )

        # Pas d'abonnements dans les donn√©es Odoo actuelles
        ecarts_abo_count = 0

        print(f"   ‚Ä¢ √âcarts Base > 5%: {len(ecarts_base)} lignes")
        print(f"   ‚Ä¢ √âcarts HP > 5%: {len(ecarts_hp)} lignes")
        print(f"   ‚Ä¢ √âcarts HC > 5%: {len(ecarts_hc)} lignes")
        print(f"   ‚Ä¢ √âcarts Abonnement > 5%: {ecarts_abo_count} lignes")
    return


@app.cell(hide_code=True)
def _(comparison):
    # Agr√©gation par r√©f√©rence contractuelle
    ecarts_par_contrat = (
        comparison
        .group_by('ref_situation_contractuelle')
        .agg([
            pl.len().alias('nb_periodes'),
            pl.col('pdl').first().alias('pdl'),  # Garder le PDL
            pl.col('type_tarification').first().alias('type_tarif'),

            # Totaux quantit√©s ElectriCore
            pl.col('base_kwh').sum().alias('total_base_kwh_electricore'),
            pl.col('hp_kwh').sum().alias('total_hp_kwh_electricore'),
            pl.col('hc_kwh').sum().alias('total_hc_kwh_electricore'),

            # Totaux quantit√©s Odoo
            pl.col('base').sum().alias('total_base_kwh_odoo'),
            pl.col('HP').sum().alias('total_hp_kwh_odoo'),
            pl.col('HC').sum().alias('total_hc_kwh_odoo'),

            # Totaux √©carts absolus
            pl.col('ecart_base_kwh').sum().alias('total_ecart_base_kwh'),
            pl.col('ecart_hp_kwh').sum().alias('total_ecart_hp_kwh'),
            pl.col('ecart_hc_kwh').sum().alias('total_ecart_hc_kwh'),

            # Moyennes √©carts relatifs (sans les null)
            pl.col('ecart_pct_base_kwh').mean().alias('moy_ecart_pct_base'),
            pl.col('ecart_pct_hp_kwh').mean().alias('moy_ecart_pct_hp'),
            pl.col('ecart_pct_hc_kwh').mean().alias('moy_ecart_pct_hc'),
        ])
        .sort('nb_periodes', descending=True)
    )
    ecarts_par_contrat
    return


if __name__ == "__main__":
    app.run()
