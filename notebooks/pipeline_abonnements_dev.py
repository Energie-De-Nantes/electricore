import marimo

__generated_with = "0.14.17"
app = marimo.App(width="medium")


@app.cell
def _():
    import marimo as mo
    from pathlib import Path
    import pandas as pd
    import numpy as np

    # ElectriFlux - Extract
    from electriflux.simple_reader import process_flux

    # ElectriCore - Transform
    from electricore.inputs.flux import lire_flux_c15, lire_flux_r151

    # ElectriCore - Process : Pipeline pur + orchestration moderne
    from electricore.core.pipeline_abonnements import pipeline_abonnement, generer_periodes_abonnement
    from electricore.core.orchestration import calculer_abonnements
    from electricore.core.utils.formatage import formater_date_francais

    # Debugging
    from icecream import ic
    return (
        Path,
        formater_date_francais,
        lire_flux_c15,
        lire_flux_r151,
        mo,
        pd,
        pipeline_abonnement,
        process_flux,
    )


@app.cell(hide_code=True)
def _(Path, mo):
    # Configuration des chemins de donn√©es
    data_path = Path('~/data/flux_enedis').expanduser()
    c15_path = data_path / 'C15'
    r151_path = data_path / 'R151'

    _status_message = mo.md(f"""
    ## Configuration des chemins

    - **R√©pertoire principal**: `{data_path}`
    - **Flux C15**: `{c15_path}` {'‚úÖ' if c15_path.exists() else '‚ùå (non trouv√©)'}
    - **Flux R151**: `{r151_path}` {'‚úÖ' if r151_path.exists() else '‚ùå (non trouv√©)'}
    """)

    _status_message
    return c15_path, r151_path


@app.cell(hide_code=True)
def _(c15_path, mo, process_flux, r151_path):
    # √âtape 1: Extract - Chargement des donn√©es brutes avec ElectriFlux
    raw_c15, raw_r151, _extract_status = None, None, None

    try:
        raw_c15 = process_flux('C15', c15_path)
        raw_r151 = process_flux('R151', r151_path)
        _extract_status = mo.md(f"""
        ## üìÅ **Extract - Donn√©es brutes charg√©es**

        - **C15 (Contrats)**: {len(raw_c15)} lignes, {len(raw_c15.columns)} colonnes
        - **R151 (Relev√©s)**: {len(raw_r151)} lignes, {len(raw_r151.columns)} colonnes
        """)
    except Exception as e:
        _extract_status = mo.md(f"‚ùå **Erreur lors du chargement**: {str(e)}")

    _extract_status
    return raw_c15, raw_r151


@app.cell(hide_code=True)
def _(lire_flux_c15, lire_flux_r151, mo, raw_c15, raw_r151):
    # √âtape 2: Transform - Conversion vers les mod√®les Pandera
    historique, releves, transform_status, transform_success = None, None, None, False

    if raw_c15 is not None and raw_r151 is not None:
        try:
            # Transformation C15 ‚Üí HistoriqueP√©rim√®tre
            historique = lire_flux_c15(raw_c15)

            # Transformation R151 ‚Üí Relev√©Index
            releves = lire_flux_r151(raw_r151)

            _transform_status = mo.md(f"""
            ## üîÑ **Transform - Donn√©es typ√©es**

            - **HistoriqueP√©rim√®tre**: {len(historique)} lignes valid√©es ‚úÖ
            - **Relev√©Index**: {len(releves)} lignes valid√©es ‚úÖ

            Les donn√©es respectent les sch√©mas Pandera.
            """)
            transform_success = True
        except Exception as e:
            _transform_status = mo.md(f"‚ùå **Erreur de transformation**: {str(e)}")
    else:
        _transform_status = mo.md("‚è≠Ô∏è √âtape Transform ignor√©e (donn√©es brutes manquantes)")

    _transform_status
    return historique, transform_success


@app.cell(hide_code=True)
def _(historique, mo):
    # Inspection de l'historique du p√©rim√®tre
    _historique_display = (
        mo.vstack([mo.md("### Historique du P√©rim√®tre (sample)"), historique]) 
        if historique is not None 
        else mo.md("‚ùå Historique non disponible")
    )
    _historique_display
    return


@app.cell(hide_code=True)
def _(historique, mo, pd):
    # Analyse des √©v√©nements impactant le TURPE fixe
    turpe_analysis = None

    if historique is not None:
        # Filtre les √©v√©nements TURPE fixe
        evenements_turpe = historique[historique["impacte_abonnement"] == True] if "impacte_abonnement" in historique.columns else pd.DataFrame()

        if len(evenements_turpe) > 0:
            by_type = evenements_turpe.groupby("Evenement_Declencheur").size().to_dict()
            _turpe_analysis = mo.md(f"""
            ### üìä √âv√©nements impactant TURPE fixe

            - **Total √©v√©nements TURPE**: {len(evenements_turpe)}
            - **R√©partition par type**:
            """ + "\n".join([f"  - {k}: {v}" for k, v in by_type.items()]))
        else:
            _turpe_analysis = mo.md("‚ö†Ô∏è Aucun √©v√©nement impactant TURPE fixe trouv√©")
    else:
        _turpe_analysis = mo.md("‚ùå Historique non disponible")

    _turpe_analysis
    return


@app.cell(hide_code=True)
def _(historique, mo, pipeline_abonnement, transform_success):
    # √âtape 3: Process - Ex√©cution du pipeline_abonnement complet
    periodes_abonnement, pipeline_status, pipeline_success = None, None, False

    if transform_success and historique is not None:
        try:
            periodes_abonnement = pipeline_abonnement(historique)
            _pipeline_status = mo.md(f"""
            ## üí≥ **Process - Pipeline Abonnements**

            - **P√©riodes d'abonnement calcul√©es**: {len(periodes_abonnement)} lignes ‚úÖ
            - **Colonnes**: {len(periodes_abonnement.columns)}
            - **PDL uniques**: {periodes_abonnement['pdl'].nunique() if 'pdl' in periodes_abonnement.columns else 'N/A'}

            Le pipeline d'abonnements s'est ex√©cut√© avec succ√®s !
            """)
            pipeline_success = True
        except Exception as e:
            _pipeline_status = mo.md(f"‚ùå **Erreur pipeline_abonnement**: {str(e)}")
    else:
        _pipeline_status = mo.md("‚è≠Ô∏è Pipeline ignor√© (donn√©es transform√©es manquantes)")

    _pipeline_status
    return (periodes_abonnement,)


@app.cell(hide_code=True)
def _(mo, periodes_abonnement):
    # R√©sultats du pipeline - Aper√ßu des colonnes
    colonnes_info = None

    if periodes_abonnement is not None:
        colonnes = list(periodes_abonnement.columns)
        _colonnes_info = mo.md(f"""
        ### üìã Colonnes g√©n√©r√©es

        **M√©tadonn√©es**:
        - `Ref_Situation_Contractuelle`, `pdl`

        **Informations lisibles**:
        - `mois_annee`, `debut_lisible`, `fin_lisible`

        **Donn√©es techniques**:
        - `Formule_Tarifaire_Acheminement`, `Puissance_Souscrite`, `nb_jours`

        **Donn√©es brutes**:
        - `debut`, `fin`

        **Colonnes TURPE (si pr√©sentes)**:
        - `turpe_fixe_journalier`, `turpe_fixe`
        """)
    else:
        _colonnes_info = mo.md("‚ùå Pas de colonnes √† afficher")

    _colonnes_info
    return


@app.cell(hide_code=True)
def _(mo, periodes_abonnement):
    # R√©sultats du pipeline - Table compl√®te
    _periodes_display = (
        mo.vstack([mo.md("### üí≥ P√©riodes d'Abonnement (r√©sultat final)"), periodes_abonnement]) 
        if periodes_abonnement is not None 
        else mo.md("‚ùå P√©riodes d'abonnement non disponibles")
    )
    _periodes_display
    return


@app.cell(hide_code=True)
def _(mo, periodes_abonnement):
    # M√©triques de qualit√© et validation
    quality_metrics = None

    if periodes_abonnement is not None:
        # Statistiques de base
        total_periodes = len(periodes_abonnement)
        pdls_uniques = periodes_abonnement['pdl'].nunique() if 'pdl' in periodes_abonnement.columns else "N/A"

        # Analyse des dur√©es
        if 'nb_jours' in periodes_abonnement.columns:
            duree_moyenne = round(periodes_abonnement['nb_jours'].mean(), 1)
            duree_mediane = round(periodes_abonnement['nb_jours'].median(), 1)
            duree_min = periodes_abonnement['nb_jours'].min()
            duree_max = periodes_abonnement['nb_jours'].max()
        else:
            duree_moyenne = duree_mediane = duree_min = duree_max = "N/A"

        # Analyse des formules tarifaires
        if 'Formule_Tarifaire_Acheminement' in periodes_abonnement.columns:
            formules_uniques = periodes_abonnement['Formule_Tarifaire_Acheminement'].nunique()
            formules_top = periodes_abonnement['Formule_Tarifaire_Acheminement'].value_counts().head(3).to_dict()
        else:
            formules_uniques = "N/A"
            formules_top = {}

        _quality_metrics = mo.md(f"""
        ## üìä **M√©triques de Qualit√©**

        ### Volumes
        - **Total des p√©riodes**: {total_periodes}
        - **PDL uniques**: {pdls_uniques}
        - **Formules tarifaires uniques**: {formules_uniques}

        ### Dur√©es des p√©riodes (jours)
        - **Moyenne**: {duree_moyenne}
        - **M√©diane**: {duree_mediane}
        - **Min / Max**: {duree_min} / {duree_max}

        ### Top 3 Formules Tarifaires
        """ + ("\n".join([f"- **{k}**: {v} p√©riodes" for k, v in formules_top.items()]) if formules_top else "N/A"))
    else:
        _quality_metrics = mo.md("‚è≠Ô∏è M√©triques non disponibles")

    _quality_metrics
    return


@app.cell(hide_code=True)
def _(formater_date_francais, mo, periodes_abonnement):
    # Test des fonctions de formatage
    format_test = None

    if periodes_abonnement is not None and len(periodes_abonnement) > 0:
        # Prendre la premi√®re p√©riode comme exemple
        exemple_debut = periodes_abonnement.iloc[0]['debut'] if 'debut' in periodes_abonnement.columns else None

        if exemple_debut is not None:

            # Tests des diff√©rents formats
            format_jour = formater_date_francais(exemple_debut, "d MMMM yyyy")
            format_mois = formater_date_francais(exemple_debut, "LLLL yyyy")
            format_court = formater_date_francais(exemple_debut, "dd/MM/yyyy")

            _format_test = mo.md(f"""
            ### üóìÔ∏è Test des Fonctions de Formatage

            **Date exemple**: `{exemple_debut}`

            - **Format complet**: {format_jour}
            - **Format mois**: {format_mois}  
            - **Format court**: {format_court}

            ‚úÖ La fonction `formater_date_francais()` fonctionne correctement !
            """)
        else:
            _format_test = mo.md("‚ö†Ô∏è Pas de date exemple disponible pour le test")
    else:
        _format_test = mo.md("‚è≠Ô∏è Test formatage ignor√© (donn√©es manquantes)")

    _format_test
    return


@app.cell(hide_code=True)
def _(mo):
    mo.md(
        """
    ## üîß **Zone de Debug Interactive**

    Utilisez les cellules ci-dessous pour explorer les donn√©es plus en d√©tail.
    """
    )
    return


@app.cell(hide_code=True)
def _(mo):
    # Interface pour s√©lectionner un PDL sp√©cifique √† inspecter
    pdl_input = mo.ui.text(placeholder="Entrez un PDL √† inspecter", label="PDL √† analyser")
    pdl_input
    return (pdl_input,)


@app.cell(hide_code=True)
def _(mo, pdl_input, periodes_abonnement):
    # Analyse d√©taill√©e d'un PDL sp√©cifique
    pdl_analysis = None

    if periodes_abonnement is not None and pdl_input.value:
        pdl_data = periodes_abonnement[periodes_abonnement['pdl'] == pdl_input.value]
        if len(pdl_data) > 0:
            _pdl_analysis = mo.vstack([
                mo.md(f"### Analyse d√©taill√©e du PDL: {pdl_input.value}"),
                mo.md(f"**{len(pdl_data)} p√©riode(s) d'abonnement trouv√©e(s)**"),
                pdl_data
            ])
        else:
            _pdl_analysis = mo.md(f"‚ùå Aucune p√©riode d'abonnement trouv√©e pour le PDL: {pdl_input.value}")
    else:
        _pdl_analysis = mo.md("üí° Entrez un PDL ci-dessus pour voir l'analyse d√©taill√©e")

    _pdl_analysis
    return


@app.cell(hide_code=True)
def _(mo):
    # Interface pour tester le formatage de dates
    date_input = mo.ui.text(placeholder="2025-03-15", label="Date √† formater (YYYY-MM-DD)")
    format_input = mo.ui.text(placeholder="d MMMM yyyy", label="Format Babel", value="d MMMM yyyy")

    mo.vstack([
        mo.md("### üóìÔ∏è Test de Formatage de Dates"),
        date_input,
        format_input
    ])
    return date_input, format_input


@app.cell(hide_code=True)
def _(date_input, format_input, formater_date_francais, mo, pd):
    # R√©sultat du test de formatage
    format_result = None

    if date_input.value and format_input.value:
        try:
            test_date = pd.Timestamp(date_input.value)
            resultat = formater_date_francais(test_date, format_input.value)
            _format_result = mo.md(f"""
            **R√©sultat**: `{resultat}`
            """)
        except Exception as e:
            _format_result = mo.md(f"‚ùå Erreur: {str(e)}")
    else:
        _format_result = mo.md("üí° Entrez une date et un format ci-dessus")

    _format_result
    return


@app.cell(hide_code=True)
def _(mo):
    mo.md(
        """
    ## üìù **Notes de D√©veloppement**

    - Le notebook charge les donn√©es depuis `~/data/flux_enedis/`
    - Pipeline: ElectriFlux (extract) ‚Üí ElectriCore/inputs (transform) ‚Üí ElectriCore/core (process)
    - **Nouveau**: Fonction `formater_date_francais()` r√©utilisable dans `/core/utils/formatage.py`
    - **Refactoring**: Pipeline fonctionnel avec `.query()`, `.pipe()` et `.assign()`
    - R√©activit√© Marimo: toute modification en amont met √† jour les r√©sultats en aval

    **Architecture du pipeline d'abonnements**:
    1. `pipeline_commun()` - D√©tection des ruptures et √©v√©nements de facturation
    2. `generer_periodes_abonnement()` - Calcul des p√©riodes avec formatage
    3. `ajouter_turpe_fixe()` - Enrichissement avec tarifs TURPE

    **Prochaines √©tapes**: Am√©liorer les visualisations temporelles, ajouter des graphiques de dur√©e
    """
    )
    return


if __name__ == "__main__":
    app.run()
