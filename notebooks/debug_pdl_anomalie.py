"""
Notebook de debug : Analyse d'un PDL avec anomalie de consommation.

PDL cible : 14290738060355
Probl√®me : 961,974 kWh en septembre 2025 (impossible pour r√©sidentiel)
Objectif : Tracer l'origine de la corruption des donn√©es
"""

import marimo

__generated_with = "0.16.5"
app = marimo.App(width="medium")


@app.cell
def _():
    import polars as pl
    from electricore.core.loaders import releves_harmonises, c15
    from pathlib import Path

    # Configuration
    PDL_CIBLE = "14290738060355"
    DB_PATH = "/home/virgile/workspace/electricore/electricore/etl/flux_enedis_pipeline.duckdb"
    return DB_PATH, PDL_CIBLE, c15, pl, releves_harmonises


@app.cell
def _(DB_PATH, PDL_CIBLE, pl, releves_harmonises):
    """Charger tous les relev√©s pour ce PDL"""

    relev√©s_pdl = (
        releves_harmonises(database_path=DB_PATH)
        .lazy()
        .filter(pl.col("pdl") == PDL_CIBLE)
        .sort("date_releve")
        .collect()
    )

    print(f"üìä Nombre de relev√©s trouv√©s : {len(relev√©s_pdl)}")
    print(f"üìÖ P√©riode : {relev√©s_pdl['date_releve'].min()} ‚Üí {relev√©s_pdl['date_releve'].max()}")
    print(f"üîÑ Flux d'origine : {relev√©s_pdl['flux_origine'].unique().to_list()}")

    relev√©s_pdl
    return (relev√©s_pdl,)


@app.cell
def _(pl, relev√©s_pdl):
    """Analyser les index sur la p√©riode probl√©matique (sept 2025)"""

    index_sept_2025 = relev√©s_pdl.filter(
        (pl.col("date_releve").dt.strftime('%Y-%m-%d') >= '2025-08-15') &
        (pl.col("date_releve").dt.strftime('%Y-%m-%d') <= '2025-10-15')
    ).select([
        "date_releve",
        "flux_origine",
        "index_base_kwh",
        "index_hp_kwh",
        "index_hc_kwh",
        "ordre_index"
    ]).sort("date_releve")

    print("üìç Index autour de septembre 2025 :")
    index_sept_2025
    return (index_sept_2025,)


@app.cell
def _(index_sept_2025, pl):
    """Calculer les delta entre relev√©s cons√©cutifs"""

    delta_index = index_sept_2025.with_columns([
        (pl.col("index_base_kwh") - pl.col("index_base_kwh").shift(1)).alias("delta_base"),
        (pl.col("index_hp_kwh") - pl.col("index_hp_kwh").shift(1)).alias("delta_hp"),
        (pl.col("index_hc_kwh") - pl.col("index_hc_kwh").shift(1)).alias("delta_hc"),
    ])

    print("üîç Delta entre relev√©s (consommations calcul√©es) :")
    delta_index
    return (delta_index,)


@app.cell
def _(delta_index, pl):
    """Identifier les delta aberrants (> 10 MWh)"""

    SEUIL_ABERRANT_KWH = 10_000  # 10 MWh

    delta_aberrants = delta_index.filter(
        (pl.col("delta_base").abs() > SEUIL_ABERRANT_KWH) |
        (pl.col("delta_hp").abs() > SEUIL_ABERRANT_KWH) |
        (pl.col("delta_hc").abs() > SEUIL_ABERRANT_KWH)
    )

    print(f"‚ö†Ô∏è Nombre de delta aberrants (> {SEUIL_ABERRANT_KWH:,.0f} kWh) : {len(delta_aberrants)}")
    delta_aberrants
    return


@app.cell
def _(DB_PATH, PDL_CIBLE, c15, pl):
    """V√©rifier l'historique de p√©rim√®tre pour ce PDL"""

    historique_pdl = (
        c15(database_path=DB_PATH)
        .lazy()
        .filter(pl.col("pdl") == PDL_CIBLE)
        .sort("date_evenement")
        .collect()
    )

    print(f"üìã √âv√©nements dans l'historique : {len(historique_pdl)}")

    historique_pdl.select([
        "date_evenement",
        "evenement_declencheur",
        "type_evenement",
        "etat_contractuel",
        "formule_tarifaire_acheminement",
        "puissance_souscrite_kva",
        "type_compteur"
    ])
    return (historique_pdl,)


@app.cell
def _(historique_pdl, pl):
    """Chercher des √©v√©nements suspects autour de sept 2025"""

    evt_sept_2025 = historique_pdl.filter(
        (pl.col("date_evenement").dt.strftime('%Y-%m-%d') >= '2025-08-01') &
        (pl.col("date_evenement").dt.strftime('%Y-%m-%d') <= '2025-10-31')
    )

    print("üìÖ √âv√©nements autour de septembre 2025 :")
    evt_sept_2025
    return


@app.cell
def _(pl, relev√©s_pdl):
    """V√©rifier s'il y a des retours en arri√®re (ordre_index)"""

    retours_arriere = relev√©s_pdl.filter(
        pl.col("ordre_index") == True
    )

    print(f"üîô Nombre de relev√©s avec ordre_index=True : {len(retours_arriere)}")

    if len(retours_arriere) > 0:
        retours_arriere.select([
            "date_releve",
            "flux_origine",
            "index_base_kwh",
            "ordre_index"
        ])
    return


@app.cell
def _():
    """
    üéØ SYNTH√àSE DU DEBUG

    Ce notebook permet de :

    1. ‚úÖ Charger tous les relev√©s pour le PDL probl√©matique
    2. ‚úÖ Examiner les index bruts autour de la p√©riode suspecte
    3. ‚úÖ Calculer les delta entre relev√©s cons√©cutifs
    4. ‚úÖ Identifier les delta aberrants (> 50 MWh)
    5. ‚úÖ V√©rifier l'historique de p√©rim√®tre (√©v√©nements contractuels)
    6. ‚úÖ D√©tecter les retours en arri√®re (ordre_index=True)

    üîç PROCHAINES √âTAPES :

    Si on trouve un delta aberrant :
    - V√©rifier si c'est un probl√®me de changement de compteur
    - V√©rifier si c'est un probl√®me de reset d'index
    - V√©rifier la qualit√© des donn√©es source (R151/R64)
    - V√©rifier le parsing ETL (parsers.py)

    Si pas de delta aberrant dans les relev√©s harmonis√©s :
    - Le probl√®me vient du calcul d'√©nergie dans pipeline_energie
    - V√©rifier les p√©riodes d'√©nergie calcul√©es
    - V√©rifier l'agr√©gation mensuelle
    """
    return


if __name__ == "__main__":
    app.run()
