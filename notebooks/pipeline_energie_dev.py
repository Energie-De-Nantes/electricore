import marimo

__generated_with = "0.14.17"
app = marimo.App(width="medium")


@app.cell
def _():
    import marimo as mo
    return (mo,)


@app.cell
def _():
    # Imports pour le pipeline complet
    from pathlib import Path
    import pandas as pd
    import numpy as np

    # ElectriFlux - Extract
    from electriflux.simple_reader import process_flux

    # ElectriCore - Transform
    from electricore.inputs.flux import lire_flux_c15, lire_flux_r151

    # ElectriCore - Process : Pipeline pur + orchestration moderne
    from electricore.core.pipeline_abonnements import pipeline_abonnement
    from electricore.core.pipeline_energie import pipeline_energie
    from electricore.core.orchestration import calculer_energie

    # Debugging
    from icecream import ic

    return Path, calculer_energie, lire_flux_c15, lire_flux_r151, pipeline_energie, process_flux


@app.cell(hide_code=True)
def _(Path, mo):
    # Configuration des chemins de donn√©es
    data_path = Path('~/data/flux_enedis').expanduser()
    c15_path = data_path / 'C15'
    r151_path = data_path / 'R151'

    _status_message = mo.md(f"""
    ## Configuration des chemins

    - **R√©pertoire principal**: `{data_path}`
    - **Flux C15**: `{c15_path}` {'‚úÖ' if c15_path.exists() else '‚ùå (non trouv√©)'}
    - **Flux R151**: `{r151_path}` {'‚úÖ' if r151_path.exists() else '‚ùå (non trouv√©)'}
    """)

    _status_message
    return c15_path, r151_path


@app.cell(hide_code=True)
def _(c15_path, mo, process_flux, r151_path):
    # √âtape 1: Extract - Chargement des donn√©es brutes avec ElectriFlux
    raw_c15, raw_r151, _extract_status = None, None, None

    try:
        raw_c15 = process_flux('C15', c15_path)
        raw_r151 = process_flux('R151', r151_path)
        _extract_status = mo.md(f"""
        ## üìÅ **Extract - Donn√©es brutes charg√©es**

        - **C15 (Contrats)**: {len(raw_c15)} lignes, {len(raw_c15.columns)} colonnes
        - **R151 (Relev√©s)**: {len(raw_r151)} lignes, {len(raw_r151.columns)} colonnes
        """)
    except Exception as e:
        _extract_status = mo.md(f"‚ùå **Erreur lors du chargement**: {str(e)}")

    _extract_status
    return raw_c15, raw_r151


@app.cell(hide_code=True)
def _(lire_flux_c15, lire_flux_r151, mo, raw_c15, raw_r151):
    # √âtape 2: Transform - Conversion vers les mod√®les Pandera
    historique, releves, transform_status, transform_success = None, None, None, False

    if raw_c15 is not None and raw_r151 is not None:
        try:
            # Transformation C15 ‚Üí HistoriqueP√©rim√®tre
            historique = lire_flux_c15(raw_c15)

            # Transformation R151 ‚Üí Relev√©Index
            releves = lire_flux_r151(raw_r151)

            _transform_status = mo.md(f"""
            ## üîÑ **Transform - Donn√©es typ√©es**

            - **HistoriqueP√©rim√®tre**: {len(historique)} lignes valid√©es ‚úÖ
            - **Relev√©Index**: {len(releves)} lignes valid√©es ‚úÖ

            Les donn√©es respectent les sch√©mas Pandera.
            """)
            transform_success = True
        except Exception as e:
            _transform_status = mo.md(f"‚ùå **Erreur de transformation**: {str(e)}")
    else:
        _transform_status = mo.md("‚è≠Ô∏è √âtape Transform ignor√©e (donn√©es brutes manquantes)")

    _transform_status
    return historique, releves, transform_success


@app.cell
def _(historique, mo):
    # Inspection de l'historique du p√©rim√®tre
    _historique_display = (
        mo.vstack([mo.md("### Historique du P√©rim√®tre (sample)"), historique]) 
        if historique is not None 
        else mo.md("‚ùå Historique non disponible")
    )
    _historique_display
    return


@app.cell
def _(mo, releves):
    # Inspection des relev√©s
    _releves_display = (
        mo.vstack([mo.md("### Relev√©s Index (sample)"), releves]) 
        if releves is not None 
        else mo.md("‚ùå Relev√©s non disponibles")
    )
    _releves_display
    return


@app.cell(hide_code=True)
def _(historique, mo, pipeline_energie, releves, transform_success):
    # √âtape 3: Process - Ex√©cution du pipeline_energie
    periodes_energie, pipeline_status, pipeline_success = None, None, False

    if transform_success and historique is not None and releves is not None:
        try:
            periodes_energie = pipeline_energie(historique, releves)
            _pipeline_status = mo.md(f"""
            ## ‚ö° **Process - Pipeline √ânergies**

            - **P√©riodes d'√©nergie calcul√©es**: {len(periodes_energie)} lignes ‚úÖ
            - **Colonnes**: {len(periodes_energie.columns)}

            Le pipeline s'est ex√©cut√© avec succ√®s !
            """)
            pipeline_success = True
        except Exception as e:
            _pipeline_status = mo.md(f"‚ùå **Erreur pipeline_energie**: {str(e)}")
    else:
        _pipeline_status = mo.md("‚è≠Ô∏è Pipeline ignor√© (donn√©es transform√©es manquantes)")

    _pipeline_status
    return (periodes_energie,)


@app.cell(hide_code=True)
def _(mo, periodes_energie):
    # R√©sultats du pipeline
    _periodes_display = (
        mo.vstack([mo.md("### P√©riodes d'√ânergie (r√©sultat final)"), periodes_energie]) 
        if periodes_energie is not None 
        else mo.md("‚ùå P√©riodes d'√©nergie non disponibles")
    )
    _periodes_display
    return


@app.cell(hide_code=True)
def _(mo, periodes_energie):
    # Validation et m√©triques de qualit√©
    quality_metrics = None

    if periodes_energie is not None:
        # Statistiques de base
        total_periodes = len(periodes_energie)
        periodes_completes = periodes_energie['data_complete'].sum() if 'data_complete' in periodes_energie.columns else "N/A"
        periodes_irregulieres = periodes_energie['periode_irreguliere'].sum() if 'periode_irreguliere' in periodes_energie.columns else "N/A"

        # PDLs uniques
        pdls_uniques = periodes_energie['pdl'].nunique() if 'pdl' in periodes_energie.columns else "N/A"

        _quality_metrics = mo.md(f"""
        ## üìä **M√©triques de Qualit√©**

        - **Total des p√©riodes**: {total_periodes}
        - **PDL uniques**: {pdls_uniques}
        - **Donn√©es compl√®tes**: {periodes_completes}
        - **P√©riodes irr√©guli√®res**: {periodes_irregulieres}
        """)
    else:
        _quality_metrics = mo.md("‚è≠Ô∏è M√©triques non disponibles")

    _quality_metrics
    return


@app.cell(hide_code=True)
def _(mo, periodes_energie):
    # Colonnes disponibles pour inspection
    columns_info = None

    if periodes_energie is not None:
        colonnes = list(periodes_energie.columns)
        _columns_info = mo.md(f"""
        ### Colonnes disponibles
        {', '.join(colonnes)}
        """)
    else:
        _columns_info = mo.md("‚ùå Pas de colonnes √† afficher")

    _columns_info
    return


@app.cell(hide_code=True)
def _(mo):
    mo.md(
        """
    ## üîß **Zone de Debug Interactive**

    Utilisez les cellules ci-dessous pour explorer les donn√©es plus en d√©tail.
    """
    )
    return


@app.cell(hide_code=True)
def _(mo):
    # Interface pour s√©lectionner un PDL sp√©cifique √† inspecter
    pdl_input = mo.ui.text(placeholder="Entrez un PDL √† inspecter", label="PDL √† analyser")
    pdl_input
    return (pdl_input,)


@app.cell(hide_code=True)
def _(mo, pdl_input, periodes_energie):
    # Analyse d√©taill√©e d'un PDL sp√©cifique
    pdl_analysis = None

    if periodes_energie is not None and pdl_input.value:
        pdl_data = periodes_energie[periodes_energie['pdl'] == pdl_input.value]
        if len(pdl_data) > 0:
            _pdl_analysis = mo.vstack([
                mo.md(f"### Analyse d√©taill√©e du PDL: {pdl_input.value}"),
                pdl_data
            ])
        else:
            _pdl_analysis = mo.md(f"‚ùå Aucune donn√©e trouv√©e pour le PDL: {pdl_input.value}")
    else:
        _pdl_analysis = mo.md("üí° Entrez un PDL ci-dessus pour voir l'analyse d√©taill√©e")

    _pdl_analysis
    return


@app.cell(hide_code=True)
def _(mo):
    mo.md(
        """
    ## üìù **Notes de D√©veloppement**

    - Le notebook charge les donn√©es depuis `~/data/flux_enedis/`
    - Pipeline: ElectriFlux (extract) ‚Üí ElectriCore/inputs (transform) ‚Üí ElectriCore/core (process)
    - R√©activit√© Marimo: toute modification en amont met √† jour les r√©sultats en aval
    - Utilisez la zone de debug pour inspecter des cas sp√©cifiques

    **Prochaines √©tapes**: Am√©liorer la validation, ajouter des visualisations temporelles
    """
    )
    return


if __name__ == "__main__":
    app.run()
